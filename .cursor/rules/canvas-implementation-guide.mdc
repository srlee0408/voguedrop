---
alwaysApply: true
description: Canvas page implementation guide with component references, API endpoints, and architectural patterns
---

# Canvas Page Implementation Guide

This rule provides comprehensive guidance for implementing Canvas page features, including component architecture, API integrations, and state management patterns.

## Core Architecture

### Main Entry Point
- [app/canvas/page.tsx](mdc:app/canvas/page.tsx) - Main canvas page with slot management, image upload, video generation, and history integration

### Key Components Structure
```
app/canvas/
├── page.tsx                    # Main canvas page with state management
├── _components/
│   ├── Canvas.tsx             # 4-slot grid display with progress/video rendering
│   ├── LeftPanel.tsx          # Image upload + effects + prompter container
│   ├── CanvasHistoryPanel.tsx # Right panel with video history
│   ├── ImageSection.tsx       # Image upload with validation
│   ├── CanvasControls.tsx     # Generate button + duration selector
│   ├── VideoGenerationProgress.tsx # Progress overlay for generating slots
│   ├── PrompterSection.tsx    # Text prompt input section
│   ├── EffectsSection.tsx     # Selected effects display
│   └── EffectsGallery.tsx     # Effect selection gallery
├── _hooks/
│   ├── useCanvas.ts           # Canvas images state management
│   ├── useEffectsData.tsx     # Effects data provider and fetching
│   └── useBeforeUnload.ts     # Prevent navigation during generation
```

## Slot Management System (핵심 상태 관리)

### 슬롯 상태 구조
```typescript
// 4개 슬롯의 콘텐츠 (이미지 | 비디오 | null)
const [slotContents, setSlotContents] = useState<Array<{type: 'image' | 'video', data: string | GeneratedVideo} | null>>([null, null, null, null])

// 각 슬롯의 상태 (빈/생성중/완료)
const [slotStates, setSlotStates] = useState<Array<'empty' | 'generating' | 'completed'>>(['empty', 'empty', 'empty', 'empty'])

// 완료 시점 기록 (가장 오래된 교체 규칙용)
const [slotCompletedAt, setSlotCompletedAt] = useState<Array<number | null>>([null, null, null, null])
```

### 슬롯 배치 우선순위 규칙
1. **이미지 업로드**: 빈 슬롯 → 이미지 슬롯(진행 중 제외) → 가장 오래된 완료 비디오
2. **Generate 실행**: 현재 이미지와 일치하는 슬롯 → 빈 슬롯 → 가장 오래된 완료
3. **히스토리 선택**: 빈 슬롯 → 이미지 슬롯 → 가장 오래된 완료 비디오

### 슬롯 상태 표시
- **이미지 미리보기**: "Ready to Generate" 반투명 오버레이
- **생성 중**: [VideoGenerationProgress.tsx](mdc:app/canvas/_components/VideoGenerationProgress.tsx) 프로그레스 바
- **완료**: 재생 가능한 비디오 표시

## API Integration

### Canvas API 엔드포인트
```
app/api/canvas/
├── generate-async/     # 비동기 비디오 생성 시작
├── generate/          # 동기 비디오 생성 (deprecated)
├── jobs/              # 생성 작업 상태 폴링
├── history/           # 사용자 비디오 히스토리 조회
├── favorite/          # 즐겨찾기 토글
├── favorites/         # 즐겨찾기 목록 조회
├── effects/           # 효과 템플릿 조회
├── categories/        # 효과 카테고리 조회
├── library/           # 라이브러리 비디오 조회
└── upload/            # 이미지 업로드 (Supabase Storage)
```

### 생성 플로우 패턴
```typescript
// 1. 비동기 생성 요청
const response = await fetch('/api/canvas/generate-async', {
  method: 'POST',
  body: JSON.stringify({
    imageUrl: currentGeneratingImage,
    effectIds: selectedEffects.map(effect => effect.id),
    basePrompt: promptText,
    duration: selectedDuration,
  })
});

// 2. 폴링으로 상태 확인
const pollJobs = async (targetSlot: number) => {
  const statusResponse = await fetch(`/api/canvas/jobs/${job.jobId}`);
  const statusData = await statusResponse.json();
  
  if (statusData.status === 'completed') {
    // 슬롯에 비디오 배치 + 완료 시점 기록
  }
};
```

## Type Definitions

### 핵심 타입
- [types/canvas.ts](mdc:types/canvas.ts) - GeneratedVideo, CanvasImage 등 캔버스 관련 타입
- [types/database.ts](mdc:types/database.ts) - EffectTemplateWithMedia 등 DB 타입

## State Management Patterns

### 이미지 업로드 처리
```typescript
onImageUpload={(imageUrl) => {
  setCurrentGeneratingImage(imageUrl);
  setSlotContents(prev => {
    // prev 기반으로 동시 업로드 시에도 순차 배치 보장
    let target = findEmptySlot(prev) || findImageSlot(prev) || findOldestVideoSlot(prev);
    // ...
  });
}}
```

### 생성 완료 시 처리
```typescript
// 이미지 썸네일을 실제 비디오로 교체
setSlotContents(prev => {
  const newSlots = [...prev];
  newSlots[targetSlot] = { type: 'video', data: newVideo };
  return newSlots;
});

// 상태를 completed로 변경 + 완료 시점 기록
setSlotStates(prev => { newStates[targetSlot] = 'completed'; });
setSlotCompletedAt(prev => { newTimes[targetSlot] = Date.now(); });
```

### 히스토리 토글 패턴
```typescript
// 이미 슬롯에 있으면 제거, 없으면 배치
const existingIndex = slotContents.findIndex(slot => 
  slot?.type === 'video' && slot.data.id === video.id
);
if (existingIndex !== -1) {
  // 제거 로직
} else {
  // 배치 로직 (우선순위 규칙 적용)
}
```

## 동시성 및 상태 안전성

### 진행 중 슬롯 보호
```typescript
// generatingProgress Map을 사용해 실시간 진행 상태 확인
const isGeneratingSlot = generatingProgress.has(i.toString());
if (slotContents[i]?.type === 'image' && !isGeneratingSlot) {
  // 교체 가능한 이미지 슬롯
}
```

### 동시 생성 제한
```typescript
// 현재: 최대 2개 동시 생성 제한
const canGenerate = !!currentGeneratingImage && 
  (selectedEffects.length > 0 || promptText.trim().length > 0) &&
  generatingSlots.size < 2;
```

## Component Communication Patterns

### LeftPanel → Canvas Page
- `onImageUpload`: 이미지 업로드 완료 시 슬롯 배치
- `onImageRemove`: LeftPanel 이미지 제거 시 해당 슬롯 정리

### Canvas → History Panel
- `slotContents` prop으로 현재 슬롯 상태 전달
- 히스토리 패널에서 슬롯 번호 배지 표시

### Generate Button 상태
- `canGenerate`: 이미지 + (효과 또는 프롬프트) + 동시 생성 제한 확인
- `isGenerating`: 전역 생성 진행 상태

## Error Handling

### 생성 실패 처리
```typescript
// 실패 시 슬롯 상태 복원
setSlotStates(prev => { newStates[targetSlot] = 'empty'; });
setSlotContents(prev => { newSlots[targetSlot] = null; });
setSlotCompletedAt(prev => { newTimes[targetSlot] = null; });
```

### 폴링 타임아웃 처리
```typescript
// 5분 경과 시 webhook 상태 확인 후 직접 폴링
if (elapsedMinutes >= 5) {
  const pollResponse = await fetch(`/api/canvas/jobs/${job.jobId}/poll`);
}
```

## Performance Optimizations

### 진행률 업데이트 최적화
- 단조 증가 보장: `Math.max(currentProgress, targetProgress)`
- 완료 시 동적 애니메이션 시간 계산
- 슬롯별 개별 진행률 맵 관리

### 상태 업데이트 배치화
```typescript
// 한 번의 setSlotContents 호출로 복수 슬롯 업데이트
setSlotContents(prev => {
  const newSlots = [...prev];
  // 여러 슬롯 수정 로직
  return newSlots;
});
```

이 가이드를 참조하여 Canvas 페이지의 슬롯 관리, 생성 플로우, 히스토리 통합 등을 일관되게 구현하세요.