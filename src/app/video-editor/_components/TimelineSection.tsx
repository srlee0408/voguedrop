/**
 * TimelineSection - ÌÉÄÏûÑÎùºÏù∏ ÏÑπÏÖò ÎûòÌçº Ïª¥Ìè¨ÎÑåÌä∏ üé¨
 * 
 * üìå Ï£ºÏöî Ïó≠Ìï†:
 * 1. Timeline Ïª¥Ìè¨ÎÑåÌä∏ÏôÄ Context ProviderÎì§ÏùÑ Ïó∞Í≤∞ÌïòÎäî Ï§ëÍ∞Ñ Í≥ÑÏ∏µ
 * 2. ÎπÑÎîîÏò§ ÏóêÎîîÌÑ∞Ïùò Î™®Îì† ÏÉÅÌÉúÏôÄ Ìï∏Îì§Îü¨Î•º TimelineÏóê Ï£ºÏûÖ
 * 3. Î©ÄÌã∞Î†àÏù∏ ÏßÄÏõê (ÏÇ¨Ïö¥Îìú/ÌÖçÏä§Ìä∏/ÎπÑÎîîÏò§ Í∞ÅÍ∞Å Ïó¨Îü¨ Î†àÏù∏ Í¥ÄÎ¶¨)
 * 4. ÌÅ¥Î¶Ω Ï°∞Ïûë Ïù¥Î≤§Ìä∏Îì§ÏùÑ Context HookÏúºÎ°ú Ïó∞Í≤∞
 * 
 * üéØ ÌïµÏã¨ ÌäπÏßï:
 * - Context Providers (useClips, usePlayback, useHistory, useProject) ÌÜµÌï©
 * - ÎπÑÎîîÏò§/ÌÖçÏä§Ìä∏/ÏÇ¨Ïö¥Îìú ÌÅ¥Î¶ΩÎ≥Ñ CRUD ÏûëÏóÖ Ìï∏Îì§Îü¨ Í¥ÄÎ¶¨
 * - Î©ÄÌã∞Î†àÏù∏ ÏãúÏä§ÌÖú (soundLanes, textLanes, videoLanes)
 * - ÌÅ¥Î¶Ω Î∂ÑÌï†, Î≥µÏ†ú, Î¶¨ÏÇ¨Ïù¥Ï¶à, ÏúÑÏπò Î≥ÄÍ≤Ω Îì± Í≥†Í∏â Ìé∏Ïßë Í∏∞Îä•
 * - Ïã§Ìñâ Ï∑®ÏÜå/Îã§Ïãú Ïã§Ìñâ ÏÉÅÌÉú Ïó∞Í≤∞
 * 
 * üöß Ï£ºÏùòÏÇ¨Ìï≠:
 * - PropsÎ°ú Î∞õÎäî Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Îì§Ïù¥ ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏ÏôÄ ÏùºÏπòÌï¥Ïïº Ìï®
 * - Timeline ÎÜíÏù¥Îäî useProject HookÏùÑ ÌÜµÌï¥ ÎèôÏ†ÅÏúºÎ°ú Í¥ÄÎ¶¨
 * - Î™®Îì† ÌÅ¥Î¶Ω ÌÉÄÏûÖ(ÎπÑÎîîÏò§/ÌÖçÏä§Ìä∏/ÏÇ¨Ïö¥Îìú)Ïóê ÎåÄÌïú ÏùºÍ¥ÄÎêú Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†úÍ≥µ
 * - Î†àÏù∏ Ïù∏Îç±Ïä§ Í¥ÄÎ¶¨Î°ú Î©ÄÌã∞Ìä∏Îûô Ìé∏Ïßë ÏßÄÏõê
 */
'use client';

import Timeline from './Timeline';
import { useClips, usePlayback, useHistory, useProject } from '../_context/Providers';

interface TimelineSectionProps {
  PIXELS_PER_SECOND: number;
  soundLanes?: number[]; // ÏÇ¨Ïö¥Îìú Î†àÏù∏ Î∞∞Ïó¥
  textLanes?: number[]; // ÌÖçÏä§Ìä∏ Î†àÏù∏ Î∞∞Ïó¥
  videoLanes?: number[]; // ÎπÑÎîîÏò§ Î†àÏù∏ Î∞∞Ïó¥
  onSplitVideoClip: (id: string) => void;
  onSplitTextClip: (id: string) => void;
  onSplitSoundClip: (id: string) => void;
  onAddText: () => void;
  onEditSoundClip: () => void;
  onAddSoundLane?: () => void; // ÏÇ¨Ïö¥Îìú Î†àÏù∏ Ï∂îÍ∞Ä
  onDeleteSoundLane?: (laneIndex: number) => void; // ÏÇ¨Ïö¥Îìú Î†àÏù∏ ÏÇ≠Ï†ú
  onAddSoundToLane?: (laneIndex: number) => void; // ÌäπÏ†ï Î†àÏù∏Ïóê ÏÇ¨Ïö¥Îìú Ï∂îÍ∞Ä
  onUpdateSoundClipLane?: (id: string, laneIndex: number) => void; // ÏÇ¨Ïö¥Îìú ÌÅ¥Î¶Ω Î†àÏù∏ Î≥ÄÍ≤Ω
  onAddTextLane?: () => void; // ÌÖçÏä§Ìä∏ Î†àÏù∏ Ï∂îÍ∞Ä
  onDeleteTextLane?: (laneIndex: number) => void; // ÌÖçÏä§Ìä∏ Î†àÏù∏ ÏÇ≠Ï†ú
  onAddTextToLane?: (laneIndex: number) => void; // ÌäπÏ†ï Î†àÏù∏Ïóê ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä
  onUpdateTextClipLane?: (id: string, laneIndex: number) => void; // ÌÖçÏä§Ìä∏ ÌÅ¥Î¶Ω Î†àÏù∏ Î≥ÄÍ≤Ω
  onAddVideoLane?: () => void; // ÎπÑÎîîÏò§ Î†àÏù∏ Ï∂îÍ∞Ä
  onDeleteVideoLane?: (laneIndex: number) => void; // ÎπÑÎîîÏò§ Î†àÏù∏ ÏÇ≠Ï†ú
  onAddVideoToLane?: (laneIndex: number) => void; // ÌäπÏ†ï Î†àÏù∏Ïóê ÎπÑÎîîÏò§ Ï∂îÍ∞Ä
  onUpdateVideoClipLane?: (id: string, laneIndex: number) => void; // ÎπÑÎîîÏò§ ÌÅ¥Î¶Ω Î†àÏù∏ Î≥ÄÍ≤Ω
}

export default function TimelineSection({
  PIXELS_PER_SECOND,
  soundLanes,
  textLanes,
  videoLanes,
  onSplitVideoClip,
  onSplitTextClip,
  onSplitSoundClip,
  onAddText,
  onEditSoundClip,
  onAddSoundLane,
  onDeleteSoundLane,
  onAddSoundToLane,
  onUpdateSoundClipLane,
  onAddTextLane,
  onDeleteTextLane,
  onAddTextToLane,
  onUpdateTextClipLane,
  onAddVideoLane,
  onDeleteVideoLane,
  onAddVideoToLane,
  onUpdateVideoClipLane,
}: TimelineSectionProps) {
  const { timelineHeight } = useProject();
  
  const {
    timelineClips,
    textClips,
    soundClips,
    handleDeleteVideoClip,
    handleDuplicateVideoClip,
    handleResizeVideoClip,
    handleUpdateVideoClipPosition,
    handleUpdateAllVideoClips,
    handleReorderVideoClips,
    handleEditTextClip,
    handleDeleteTextClip,
    handleDuplicateTextClip,
    handleResizeTextClip,
    handleUpdateTextClipPosition,
    handleUpdateAllTextClips,
    handleReorderTextClips,
    handleDeleteSoundClip,
    handleDuplicateSoundClip,
    handleResizeSoundClip,
    handleUpdateSoundClipPosition,
    handleUpdateAllSoundClips,
    handleReorderSoundClips,
    handleUpdateSoundVolume,
    handleUpdateSoundFade,
  } = useClips();
  
  const {
    currentTime,
    totalDuration,
    isPlaying,
    handlePlayPause,
    handleSeek,
  } = usePlayback();
  
  const {
    canUndo,
    canRedo,
    handleUndo,
    handleRedo,
  } = useHistory();

  const {
    handleAddClip,
    handleAddSound,
  } = useProject();

  return (
    <div 
      className="flex-shrink-0 relative"
      style={{ height: `${timelineHeight}px` }}
    >
      <Timeline 
        clips={timelineClips}
        textClips={textClips}
        soundClips={soundClips}
        soundLanes={soundLanes}
        textLanes={textLanes}
        videoLanes={videoLanes}
        onAddClip={handleAddClip}
        onAddText={onAddText}
        onAddSound={handleAddSound}
        onAddSoundLane={onAddSoundLane}
        onDeleteSoundLane={onDeleteSoundLane}
        onAddSoundToLane={onAddSoundToLane}
        onAddTextLane={onAddTextLane}
        onDeleteTextLane={onDeleteTextLane}
        onAddTextToLane={onAddTextToLane}
        onAddVideoLane={onAddVideoLane}
        onDeleteVideoLane={onDeleteVideoLane}
        onAddVideoToLane={onAddVideoToLane}
        onEditTextClip={handleEditTextClip}
        onEditSoundClip={onEditSoundClip}
        onDeleteTextClip={handleDeleteTextClip}
        onDeleteSoundClip={handleDeleteSoundClip}
        onDeleteVideoClip={handleDeleteVideoClip}
        onDuplicateVideoClip={handleDuplicateVideoClip}
        onDuplicateTextClip={handleDuplicateTextClip}
        onDuplicateSoundClip={handleDuplicateSoundClip}
        onSplitVideoClip={onSplitVideoClip}
        onSplitTextClip={onSplitTextClip}
        onSplitSoundClip={onSplitSoundClip}
        onResizeTextClip={handleResizeTextClip}
        onResizeSoundClip={handleResizeSoundClip}
        onReorderVideoClips={handleReorderVideoClips}
        onReorderTextClips={handleReorderTextClips}
        onReorderSoundClips={handleReorderSoundClips}
        onResizeVideoClip={handleResizeVideoClip}
        onUpdateVideoClipPosition={handleUpdateVideoClipPosition}
        onUpdateTextClipPosition={handleUpdateTextClipPosition}
        onUpdateSoundClipPosition={handleUpdateSoundClipPosition}
        onUpdateAllVideoClips={handleUpdateAllVideoClips}
        onUpdateAllTextClips={handleUpdateAllTextClips}
        onUpdateAllSoundClips={handleUpdateAllSoundClips}
        onUpdateSoundVolume={handleUpdateSoundVolume}
        onUpdateSoundFade={handleUpdateSoundFade}
        onUpdateSoundClipLane={onUpdateSoundClipLane}
        onUpdateTextClipLane={onUpdateTextClipLane}
        onUpdateVideoClipLane={onUpdateVideoClipLane}
        pixelsPerSecond={PIXELS_PER_SECOND}
        currentTime={currentTime}
        totalDuration={totalDuration}
        isPlaying={isPlaying}
        onSeek={handleSeek}
        onPlayPause={handlePlayPause}
        onUndo={handleUndo}
        onRedo={handleRedo}
        canUndo={canUndo}
        canRedo={canRedo}
      />
    </div>
  );
}